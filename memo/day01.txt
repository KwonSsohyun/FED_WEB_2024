- 프론트엔드(Front-End)
	사용자에게 보여지는 부분을 만드는 작업
	모든 작업이 아닌 웹사이트 개발에서 사용자에게 보여지는 부분을 만드는 작업
	
	단순하게 보여지는 부분을 만드는 방법이 아닌(HTML, CSS, JS)
	기술적으로 보여지는 부분을 편리하고 간단하며 관리하기 쉽게 만드는 방법(React, Vue, Vite, Thymeleaf, ...)



- NodeJS / VSCode 개발 환경 구축



- Node.js에 TypeScript 프로젝트 초기셋팅
	터미널 창			: ctrl + Shift + `(Backtick)
	노드환경 확인		: node -v

	설치			: npm install typescript ts-node
			  	  · npm install name1 name2 ... 	▶ name 설치
			  	  · npm install -g name1 name2 ... 	▶ 글로벌 설치(자체 시스템에 설치)

	TypeScript 버전 확인	: npx tsc -v


	기본 설정 파일 생성		: npx tsc --init			▶ tsconfig.json 파일 생성됨


	● 단축키 설정
	  ".vscode"    새 폴더 생성		▶ .vscode 신규 폴더 생성 (손쉽게 실행하기 위한 단축키) 
	  "tasks.json" 새 파일 생성  		▶ (npx ts-node 타입스크립트파일명.ts → 일일히 파일명 안치기 위함)


	● 단축키 실행
	  Ctrl + Shift + p			▶ 실행창
	  Tasks : Run Task			▶ 명령 실행
	  "tasks.json"파일에 label에 적힌 이름 선택 	▶ 실행 ("label": "ts-node") → ts-node 선택




- tsconfig.json 주요 속성
	타입스크립트를 사용하기 위한 기본 환경

	TypeScript가 목표로 하는 하위 호환성 버전	
	▶ "target": "es2016" (ES7 환경에서도 돌아가게 만들어)
		     ESNext (다음 버전의 자바스크립트)

	하위 호환성 버전을 만들면 해당 버전 이상의 기능은 막힘
	상위 버전의 기능을 명시하면 해당 기능은 추가적으로 이용이 가능	
	▶ "lib": ["ES2017","ES2018","ES2019","ES2020","ES2021","ES2022","ES2023","ESNext"]

	tsconfig.json파일이 있는 위치에서 실행할 타입스크립트 파일 위치
	▶ "rootDir": "./"	(현재 위치에 있는 .ts파일 실행)




- 자바스크립트 Console API
	일반 출력			▶ console.log("일반출력");
	연결 출력			▶ console.log(1, 2);

	에러 출력			▶ console.error(1, 2, 3, 4);
			  	   → log와 다르게 빨간 배경으로 에러임을 알려주는 출력
	
	판단 출력 (오류 검증)	▶ console.assert(2 < 3, "출력", "내용");
				  → 참일 땐 출력 안됨
			  	    첫번째 매개변수 → condition → true/false를 넣는 질문

				  console.assert(2 > 3, "출력", "내용");
				  → Assertion failed: 출력 내용
			  	    * false일때만 출력됨


	그룹화			▶ console.group("그룹명");
				    console.log("내용1");
				    console.groupCollapsed("그룹명"); → Collapsed 접힌상태로 출력
				   console.groupEnd();
				   → group과 groupEnd사이의 모든 출력을 한개의 그룹으로 만들어서 접을 수 있게 출력


	테이블			▶ console.table({a:1});
				  console.table({a:[1,2,3]});
				  → 가지고 있는 정보의 표의 형식으로 출력
				    key값 index, value 값 정보


	시간 (시간재는 출력)	▶ console.time("시간");
				  for (let i = 0; i < 10000; i += 1) console.assert(2 < 3, "오류");
				  console.timeEnd("시간");
				  → 시간: 2.424ms
				    동일한 이름의 time과 timeEnd를 적으면 두 내용 사이에 걸린 시간
	

	횟수 세는 출력		▶ console.count("횟수");
				  console.count("횟수");
				  console.count("횟수");
				  → 횟수: 1
				    횟수: 2
				    횟수: 3


	★ 추적 출력		▶ console.trace("넣을 수도 있지만");
				   → 해당 콘솔 이전에 들렸던 경로가 다 나온다.







