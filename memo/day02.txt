- 개발환경 세팅
	● 복사해서 가져오기
	  1) .vscode 		폴더
	  2) tsconfig.json 	파일
	  3) package.json 	파일
	
	● 터미널 창(Ctrl + Shift + `)
	  npm i		▶ node_modules 파일 생성 됨




- TypeScript 변수
	● 변수는 저장성/재활용성 필요

	● 변수 선언
	  : 라이프사이클, 변수이름, 자료형 → 변수 생성
	  ▶ let a: number;

	    let/const/var		→ 공간(라이프 사이클)
	    a				→ 위치(변수의 이름)
	    :타입				→ 공간(자료형)
					  number ▶ 숫자


	● 변수 값 저장
	  a = 5;	→ 오른쪽에 있는 5라는 정보를 왼쪽에 있는 변수에 저장




- TypeScript 타입(자료형)
	● 원시 타입
	  Number		: 숫자
	  String		: 문자열 - 작은따옴표('), 큰따옴표("), 백틱(`)
	  Boolean		: 참(true) / 거짓(false) 값
	  Null / Undefined	: 아무 여러 타입에 할당할 수 있다는 것을 의미
				  undefined → 비어있음 인데 처음부터 없었다.
				  null → 비어있음 인데 이전에 무언가가 들어있었을 수도 있다.

	
	● 객체 타입
	  Object		: 객체 / 배열,함수 까지 object로 포함
	  Array			: 배열
			  	  첫 번째 방법 → 배열 요소들을 나타내는 타입 뒤에 []
				               let fruits: string[] = ['Apple', 'Banana', 'Mango'];

			  	  두 번째 방법 → Array<> 배열 타입을 쓰는 것이다.
				               let fruits: Array<string> = ['Apple', 'Banana', 'Mango'];


	● 객체 타입 - TypeScript 추가된 타입
	  Tuple			: 배열의 서브타입 (갯수와 자료형이 고정된 배열)

	  Union			: 2개 이상의 타입을 허용하는 경우, 이를 유니언(Union)이라고 한다. (| OR 의 의미로도 쓰인다.)
				  자료형 대신 값을 넣을 수도 있다.

	  Enum			: 특정 값(상수)들의 집합 (다른 독립된 자료형)

	  Any			: 모든 타입 허용 (아무거나)
	  Unknown		: Unknown은 알 수 없는 타입을 의미 (any 보다는 정교함 - 검증된 값만 넣을 수 있다.)

	  Void			: void는 어떤 타입도 존재할 수 없음 (함수에서 반환 값이 없을 때 반환 타입을 표현)
	  Never			: 절대 발생할 수 없는 타입 (타입스크립트에서 잘못된 것을 알려주기 위한 키워드)




- TypeScript 자료형을 만드는 방법
	: 원래 있던 자료형 여러개를 섞어서 새로운 자료형으로 정의
	● 타입 별칭 (Type Alias) 
	● 인터섹션 타입 (Intersection Type)
	● 맵드 타입 (Mapped Types)
	
	


	





