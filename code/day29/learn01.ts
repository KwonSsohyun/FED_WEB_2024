// ▶ 리액트 서버리스 아키텍처(ServerLess)
/*

   ▶ 서버리스(ServerLess)
      ⇒ 서버 관리의 복잡성을 줄이는 구조
         서버리스 아키텍처는 서버 관리의 복잡성을 줄이고, 
         개발자가 애플리케이션의 로직과 사용자 경험에 더 집중할 수 있도록 돕는 구조입니다.
         비록 서버가 없다고 생각할 수 있지만, 
         실제로는 "클라우드 제공업체가 서버를 관리"합니다.


   ▶ 서버리스 아키텍처의 이점
      서버 관리에 소요되는 노력을 줄여, 개발자는 로직과 프론트엔드 개발에 더 많은 시간을 할애할 수 있습니다.
      예를 들어, 서버에 드는 노력이 100%라면, 
      이를 50%로 줄이고, 그 중 10%만 신경 쓴다면, 나머지 40%는 다른 개발 영역에 집중할 수 있습니다.



   ▶ 서버리스 구조의 가장 대표적인 것
      ⇒ Cloud Functions
         서버리스 아키텍처의 대표적인 구현체

         개발자는 실행할 함수 코드를 
         클라우드 서비스에 등록하고, 서버리스에 함수를 설정합니다.

         클라우드 제공업체는 
         사용자가 해당 함수를 호출하기 위해 등록한 URL로 HTTP 요청을 받으면, 
         해당 함수를 자동으로 실행합니다.
         개발자는 서버 관리에 대한 부담 없이 애플리케이션 로직에 집중할 수 있습니다.



   ▶ Cloud Functions 함수 등록
      Cloud Functions에 함수를 등록하면, 해당 함수에 대한 URL이 생성됩니다.
      이 URL에 접근하면 자동으로 함수가 실행되어 결과를 반환합니다.

      예시 URL
      ☁️ http://192.168.100.20:5555/cloud/cx/sd
      ☁️ http://192.168.100.20:5555/direct/abc/test.jpg



   ▶ 프론트엔드에서 신경 써야 할 사항
      서버리스 아키텍처에서 프론트엔드 개발자가 신경 써야 할 부분은 서버사이드 렌더링(SSR)과 유사합니다.
      프론트엔드는 빌드한 파일을 서버리스 환경에 업로드하고, 사용자에게 필요한 결과를 제공합니다.




   ▶ 서버리스 환경에 리액트 애플리케이션 배포하는 방법
      1) 클라이언트 빌드
         → 리액트 애플리케이션을 빌드하여 최적화된 파일을 생성
         ⇒ npm run build:client


      2) 빌드된 HTML 파일 수정 
         → 클라이언트에서 동작할 스크립트 경로 수정
           리액트 애플리케이션에서 사용하는 스크립트 파일이 
           서버리스 환경에서 접근 가능한 URL을 지정하는 것
         💻day29/dist/client/📄index.html 파일에서 "/direct/sohyun/" 경로를 추가
            ⇒ <script type="module" crossorigin src="/direct/sohyun/index-CkoBStN7.js"></script>


      3) 서버리스 파일 업로드
         → 빌드된 파일을 서버리스 환경에 등록
         ☁️http://192.168.100.20:5555/upload 서버리스 사이트에 클라이언트 빌드된 파일 등록(HTML,CSS,JS 등)
            ⇒ 💻day29/dist/client/assets/📜index-CkoBStN7.js
            ⇒ 💻day29/dist/client/📄index.html


      4) 서버리스에서 배포한 리액트 애플리케이션 확인
         → 배포된 리액트 애플리케이션이 정상적으로 작동하는지 확인
         ☁️http://192.168.100.20:5555/direct/sohyun/index.html 경로에 접속하면 리액트 애플리케이션이 정상적으로 실행


*/